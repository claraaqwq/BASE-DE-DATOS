SET SERVEROUTPUT ON;

--Pregunta 1

CREATE OR REPLACE FUNCTION OBTENER_PRECIO_FUNC(P_PARADERO1 VARCHAR2, P_PARADERO2 VARCHAR2) 
    RETURN NUMBER IS
    CURSOR C1 IS SELECT NOMBRE FROM ET_DISTRITO ORDER BY NOMBRE;
    DIST1 CHAR(6 BYTE); CONT_DIST1 NUMBER := 1;
    DIST2 CHAR(6 BYTE); CONT_DIST2 NUMBER := 1;
    NOMDIST1 VARCHAR2(100 BYTE); NOMDIST2 VARCHAR2(100 BYTE);
    SEMIDIF NUMBER; BASE NUMBER := 1;
    DISTRITO C1%ROWTYPE;
BEGIN
    SELECT ID_DISTRITO INTO DIST1 FROM ET_PARADERO WHERE UPPER(P_PARADERO1) = UPPER(NOMBRE);
    SELECT ID_DISTRITO INTO DIST2 FROM ET_PARADERO WHERE UPPER(P_PARADERO2) = UPPER(NOMBRE);
    SELECT NOMBRE INTO NOMDIST1 FROM ET_DISTRITO WHERE ID_DISTRITO = DIST1;
    SELECT NOMBRE INTO NOMDIST2 FROM ET_DISTRITO WHERE ID_DISTRITO = DIST2;
    OPEN C1;
    LOOP
        FETCH C1 INTO DISTRITO;
        EXIT WHEN C1%NOTFOUND;
        IF DISTRITO.NOMBRE < NOMDIST1 THEN CONT_DIST1 := CONT_DIST1+1; END IF;
        IF DISTRITO.NOMBRE < NOMDIST2 THEN CONT_DIST2 := CONT_DIST2+1; END IF;
    END LOOP;
    SEMIDIF := (CONT_DIST2 - CONT_DIST1)/2;
    IF SEMIDIF < 0 THEN SEMIDIF := SEMIDIF * -1; END IF;
    CLOSE C1;
    RETURN SEMIDIF + BASE;
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('NO EXISTE EL PARADERO');
END;
/
SELECT OBTENER_PRECIO_FUNC('MUSEO OSMA', 'CANADA') AS PRECIO FROM DUAL;

--Pregunta 2

SELECT PRECIO FROM ET_MATRIZ_PAGO;

DECLARE
    CURSOR C1 IS SELECT ID_PARADERO_INICIAL, ID_PARADERO_FINAL, PRECIO FROM ET_MATRIZ_PAGO;
    PARADERO1 VARCHAR2(50 BYTE); PARADERO2 VARCHAR2(50 BYTE);
    NPRECIO NUMBER; CONTADOR NUMBER:= 0;
    MATRIZ C1%ROWTYPE;
BEGIN
    OPEN C1;
    
    LOOP
        FETCH C1 INTO MATRIZ;
        EXIT WHEN C1%NOTFOUND;
        SELECT NOMBRE INTO PARADERO1 FROM ET_PARADERO WHERE MATRIZ.ID_PARADERO_INICIAL = ID_PARADERO;
        SELECT NOMBRE INTO PARADERO2 FROM ET_PARADERO WHERE MATRIZ.ID_PARADERO_FINAL = ID_PARADERO;
        NPRECIO := OBTENER_PRECIO_FUNC(PARADERO1, PARADERO2);
        IF MATRIZ.PRECIO != NPRECIO THEN CONTADOR := CONTADOR + 1; END IF;
        UPDATE ET_MATRIZ_PAGO SET PRECIO = NPRECIO WHERE ID_PARADERO_INICIAL = MATRIZ.ID_PARADERO_INICIAL AND ID_PARADERO_FINAL = MATRIZ.ID_PARADERO_FINAL;      
    END LOOP;
    dbms_output.put_line('Actualización de precios completada. Filas actualizadas: ' || CONTADOR);
    CLOSE C1;
END;
/

--Pregunta 3

CREATE OR REPLACE TRIGGER NUEVO_TICKET
BEFORE INSERT ON ET_TICKET
FOR EACH ROW
DECLARE
    NPRECIO NUMBER;
    PARADERO1 VARCHAR2(50 BYTE); PARADERO2 VARCHAR2(50 BYTE);
BEGIN
    SELECT NOMBRE INTO PARADERO1 FROM ET_PARADERO WHERE ID_PARADERO = :NEW.ID_PARADERO_INICIAL;
    SELECT NOMBRE INTO PARADERO2 FROM ET_PARADERO WHERE ID_PARADERO = :NEW.ID_PARADERO_FINAL;
    NPRECIO := OBTENER_PRECIO_FUNC(PARADERO1, PARADERO2);
    :NEW.PRECIO := NPRECIO;
    dbms_output.put_line('1 ROW(S) INSERTED.');
    dbms_output.put_line('PRECIO OBTENIDO CORRECTAMENTE: ' || NPRECIO);
END;
/
INSERT INTO ET_TICKET VALUES (4, 120, 4, 11, 0, '26/06/2023', 'N');

--Pregunta 4

SELECT * FROM ET_TURNO_PARADERO WHERE ID_TURNO = 14;

CREATE OR REPLACE TRIGGER ACTUALIZA_PARADERO
AFTER INSERT ON ET_TICKET
FOR EACH ROW
DECLARE
    TURNO NUMBER;
BEGIN
    SELECT ID_TURNO INTO TURNO FROM ET_TURNO_PARADERO WHERE ID_TURNO = :NEW.ID_TURNO AND ID_PARADERO = :NEW.ID_PARADERO_INICIAL;
    UPDATE ET_TURNO_PARADERO SET PASAJEROS_SUBIDA = PASAJEROS_SUBIDA+1 WHERE ID_PARADERO = :NEW.ID_PARADERO_INICIAL AND ID_TURNO = :NEW.ID_TURNO;
    UPDATE ET_TURNO_PARADERO SET HORA_LLEGADA = TO_CHAR(:NEW.FECHA_HORA_EMISION, 'HHMI') WHERE ID_PARADERO = :NEW.ID_PARADERO_INICIAL AND ID_TURNO = :NEW.ID_TURNO;
    dbms_output.put_line('SE ACTUALIZÓ CORRECTAMENTE LA TABLA ET_TURNO_PARADERO');
    EXCEPTION
    WHEN NO_DATA_FOUND THEN
    dbms_output.put_line('LOS DATOS SON INCORRECTOS');
END;
/

--Pregunta 5

DECLARE
    CURSOR C1 IS SELECT ID_CONDUCTOR, NOMBRES, APELLIDO_PATERNO, APELLIDO_MATERNO, GANANCIA FROM (
    
        SELECT ID_CONDUCTOR, NOMBRES, APELLIDO_PATERNO, APELLIDO_MATERNO, GANANCIA FROM ( 
            
            SELECT C.ID_CONDUCTOR, C.NOMBRES, C.APELLIDO_PATERNO, C.APELLIDO_MATERNO, SUM(PRECIO) GANANCIA
            FROM ET_CONDUCTOR C, ET_TURNO T, ET_TICKET TI
            WHERE C.ID_CONDUCTOR = T.ID_CONDUCTOR AND TI.ID_TURNO = T.ID_TURNO_VIAJE
            GROUP BY C.ID_CONDUCTOR, C.NOMBRES, C.APELLIDO_PATERNO, C.APELLIDO_MATERNO
    
        )
        ORDER BY GANANCIA
    );
    GANANCIAS C1%ROWTYPE;
BEGIN
    OPEN C1;
    LOOP
        FETCH C1 INTO GANANCIAS;
        EXIT WHEN C1%NOTFOUND;
        dbms_output.put_line('CONDUCTOR ID: ' || GANANCIAS.ID_CONDUCTOR);
        dbms_output.put_line('NOMBRE: ' || GANANCIAS.NOMBRES || ' ' || GANANCIAS.APELLIDO_PATERNO || ' ' || GANANCIAS.APELLIDO_MATERNO);
        dbms_output.put_line('GANANCIAS TOTALES: ' || GANANCIAS.GANANCIA);
        dbms_output.put_line('--------------------------------------------');
    END LOOP;
    CLOSE C1;
END;


        




    

